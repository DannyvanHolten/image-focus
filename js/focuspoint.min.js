!function(t, e) {
    "use strict";
    e.IFA = {
        Models: {},
        Collections: {},
        Views: {}
    }, t(document).on("ready", function() {
        new IFA.Views.ImageFocus({});
    });
}(jQuery, window), function(t, e) {
    "use strict";
    IFA.Models.Attachment = Backbone.Model.extend({
        defaults: {
            src: !1,
            id: !1,
            width: !1,
            height: !1,
            offset: {
                x: !1,
                y: !1
            },
            focusPoint: {
                x: 50,
                y: 50
            }
        },
        $el: !1,
        $img: !1,
        initialize: function(t) {
            this.$el = t.$el, this.$img = t.$img, this.set("id", this.$el.data("id")), this.set("src", this.$img.attr("src"));
        },
        getStoredFocusPoint: function() {
            console.log("getStoredFocusPoint");
            var e = this, i = {
                id: this.get("id")
            };
            t.ajax({
                type: "POST",
                url: ajaxurl,
                data: {
                    action: "get-focuspoint",
                    attachment: i
                },
                dataType: "json"
            }).always(function(t) {
                if (!0 === t.success) try {
                    if (!t.focusPoint.hasOwnProperty("x") || !t.focusPoint.hasOwnProperty("y")) throw "Wrong object properties";
                    e.set({
                        focusPoint: t.focusPoint
                    });
                } catch (t) {
                    console.log(t);
                }
            });
        }
    });
}(jQuery, window), function(t, e) {
    IFA.Models.FocusInterface = Backbone.Model.extend({
        defaults: {
            width: 0,
            height: 0,
            radius: 0,
            offset: {
                x: 0,
                y: 0
            },
            position: {
                x: 0,
                y: 0
            },
            clickPosition: {
                x: 0,
                y: 0
            },
            state: {
                init: !1,
                move: !1,
                active: !1,
                hover: !1
            }
        },
        initialize: function() {
            console.log("initialize focuspoint");
        },
        setState: function(t) {
            var e = this.get("state") || {};
            _.extend(e, t), this.set({
                state: e
            });
        }
    });
}(jQuery, window), function(t, e) {
    "use strict";
    IFA.Views.Attachment = Backbone.View.extend({
        events: {
            resize: "updateDimensions"
        },
        initialize: function() {
            console.log("init view attachment");
            var i = this;
            t(e).on("resize", function() {
                i.updateDimensions();
            }), this.model.once("change:focusPoint", this.updateDimensions, this);
        },
        updateDimensions: function() {
            console.log("attachment view: update dimensions");
            var t = this.model.$img, e = {
                x: t.offset().left,
                y: t.offset().top
            };
            this.model.set({
                width: t.width(),
                height: t.height(),
                offset: e
            });
        },
        render: function() {
            return console.log("attachment view: render"), this;
        },
        remove: function() {
            t(e).off("resize", this.updateDimensions), Backbone.View.prototype.remove.apply(this, arguments);
        }
    });
}(jQuery, window), function(t, e) {
    "use strict";
    IFA.Views.FocusInterface = Backbone.View.extend({
        cssClass: {
            _imageFocus: "image-focus",
            imageFocus: {
                _wrapper: "image-focus__wrapper",
                _img: "image-focus__img",
                _point: "image-focus__point",
                _clickarea: "image-focus__clickarea",
                _button: "image-focus__button"
            }
        },
        template: !1,
        $img: !1,
        imgHtml: !1,
        $imageFocus: !1,
        $container: !1,
        $clickarea: !1,
        $focusPoint: !1,
        initialize: function(t, e) {
            console.log("focusinterface view: initialize");
            this.attachment = t.attachment, this.template = wp.template("IFA-focus-point"), 
            this.$img = e.$img, this.$img.addClass(this.cssClass.imageFocus._img), this.imgHtml = this.$img.get(0).outerHTML, 
            this.$img.wrap('<div class="IFA-container"></div>'), this.$container = this.$el.find(".IFA-container"), 
            this.render(), this.model.on("change:position", this.updateFocusPoint, this), this.attachment.once("change:focusPoint", this.updateDimensionData, this), 
            this.attachment.once("change:focusPoint", this.updateFocusPoint, this);
        },
        events: {},
        render: function() {
            console.log("focusinterface view: render");
            var t = this.attachment.get("focusPoint");
            this.$container.html(this.template({
                imageObject: this.imgHtml,
                left: t.x,
                top: t.y,
                state: "is-initialized"
            })), this.setElements(), this.setEvents();
        },
        setElements: function() {
            this.$imageFocus = this.$container.find("." + this.cssClass._imageFocus), this.$clickarea = this.$container.find("." + this.cssClass.imageFocus._clickarea), 
            this.$focusPoint = this.$container.find("." + this.cssClass.imageFocus._point), 
            this.attachment.$img = this.$img = this.$container.find("." + this.cssClass.imageFocus._img), 
            this.attachment.$img = this.$img;
        },
        setEvents: function() {
            var i = this;
            this.$clickarea.on("mousedown", function(t) {
                1 === t.which && i.startMove(t, !0).move(t);
            }), this.$focusPoint.on("mousedown", function(t) {
                1 === t.which && i.startMove(t);
            }).on("mouseenter", function() {
                i.model.setState({
                    hover: !0
                }), i.$imageFocus.toggleClass("is-hover", !0);
            }).on("mouseleave", function() {
                i.model.setState({
                    hover: !1
                }), i.$imageFocus.toggleClass("is-hover", !1);
            }), t(e).on("mouseup", function(t) {
                1 === t.which && (i.model.setState({
                    move: !1,
                    active: !1
                }), i.$imageFocus.removeClass("is-active"));
            }).on("mousemove", function(t) {
                i.move(t);
            }).on("resize", function() {
                i.updateDimensionData().updateFocusPoint();
            });
        },
        startMove: function(t, e) {
            return this.updateDimensionData().updateClickPosition(t, e), this.$imageFocus.addClass("is-active"), 
            this.model.setState({
                move: !0,
                active: !0
            }), this;
        },
        move: function(t) {
            if (!1 === this.model.get("state").move) return !1;
            var e = {
                x: t.pageX,
                y: t.pageY
            }, i = {}, s = this.attachment.get("offset"), o = this.model.get("clickPosition"), n = this.attachment.get("width"), a = this.attachment.get("height");
            i.x = e.x - s.x - o.x, i.y = e.y - s.y - o.y, i.x = this.helper.calc.maxRange(i.x, 0, n), 
            i.y = this.helper.calc.maxRange(i.y, 0, a);
            var c = {};
            return c.x = i.x / n * 100, c.y = i.y / a * 100, this.attachment.set({
                focusPoint: c
            }), this.model.set({
                position: i
            }), this;
        },
        updateFocusPoint: function() {
            var t = this.attachment.get("focusPoint"), e = this.model.get("position"), i = this.model.get("radius"), s = this.attachment.get("width"), o = this.attachment.get("height"), n = this.attachment.get("src"), a = {};
            return a.x = 0 - (e.x - i), a.y = 0 - (e.y - i), this.$focusPoint.css({
                left: t.x + "%",
                top: t.y + "%",
                backgroundImage: 'url("' + n + '")',
                backgroundSize: s + "px " + o + "px ",
                backgroundPosition: a.x + "px " + a.y + "px "
            }), this;
        },
        updateClickPosition: function(t, e) {
            var i = {
                x: 0,
                y: 0
            };
            if (!0 !== e) {
                var s = {
                    x: t.pageX,
                    y: t.pageY
                }, o = this.model.get("offset");
                (i = {}).x = s.x - o.x, i.y = s.y - o.y;
            }
            return this.model.set({
                clickPosition: i
            }), this;
        },
        updateDimensionData: function() {
            this.model.width = this.$focusPoint.width(), this.model.height = this.$focusPoint.height();
            var t = this.model.width / 2;
            this.model.set("radius", t);
            var e = this.$focusPoint.offset();
            this.model.set({
                offset: {
                    x: e.left + t,
                    y: e.top + t
                }
            });
            var i = this.attachment.get("focusPoint"), s = {
                x: i.x / 100 * this.attachment.get("width"),
                y: i.y / 100 * this.attachment.get("height")
            };
            return this.model.set({
                position: s
            }), this;
        },
        helper: {
            calc: {
                maxRange: function(t, e, i) {
                    var s = t;
                    return t < e ? s = e : t > i && (s = i), s;
                }
            }
        }
    });
}(jQuery, window), function(t, e) {
    "use strict";
    IFA.Views.ImageFocus = Backbone.View.extend({
        initialize: function() {
            var e = this;
            setInterval(function() {
                var i = t(".attachment-details");
                i.length && !t(".IFA-initialized").length && i.each(function() {
                    var i = t(this);
                    e.startApplication(i);
                });
            }, 500);
        },
        startApplication: function(t) {
            var e = t.find(".details-image");
            t.addClass("IFA-initialized");
            var i = new IFA.Models.Attachment({
                $el: t,
                $img: e
            }), s = (new IFA.Views.Attachment({
                model: i
            }), new IFA.Models.FocusInterface({}));
            new IFA.Views.FocusInterface({
                el: t.get(0),
                $el: t,
                model: s,
                attachment: i
            }, {
                $img: e
            });
            i.getStoredFocusPoint(), s.set("_state.init", !0);
        },
        testApp: function() {
            alert("image opened");
        }
    });
}(jQuery, window);
//# sourceMappingURL=focuspoint.min.js.map
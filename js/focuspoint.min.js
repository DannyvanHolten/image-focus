!function(t, e) {
    "use strict";
    function i(t) {
        var e = t.find(".details-image");
        t.addClass("IFA-initialized");
        var i = new IFA.Models.Attachment({
            $el: t,
            $img: e
        }), o = (new IFA.Views.Attachment({
            model: i
        }), new IFA.Models.FocusInterface({})), s = new IFA.Views.FocusInterface({
            el: t.get(0),
            $el: t,
            model: o,
            attachment: i
        }, {
            $img: e
        });
        i.getStoredFocusPoint(), s.render(), o.set("_state.init", !0);
    }
    e.IFA = {
        Models: {},
        Collections: {},
        Views: {}
    }, t(document).on("ready", function() {
        setInterval(function() {
            var e = t(".attachment-details");
            e.length && !t(".IFA-initialized").length && e.each(function() {
                i(t(this));
            });
        }, 500);
    });
}(jQuery, window), function(t, e) {
    "use strict";
    IFA.Models.Attachment = Backbone.Model.extend({
        $el: !1,
        $img: !1,
        _id: !1,
        _width: !1,
        _height: !1,
        _offset: {
            x: !1,
            y: !1
        },
        _focusPoint: {
            x: 50,
            y: 50
        },
        initialize: function(t) {
            console.log("init model attachment"), this.$el = t.$el, this.$img = t.$img, this._id = this.$el.data("id"), 
            console.log(this._id);
        },
        getStoredFocusPoint: function() {
            console.log("getStoredFocusPoint");
            var e = this, i = {
                id: this._id
            };
            t.ajax({
                type: "POST",
                url: ajaxurl,
                data: {
                    action: "get-focuspoint",
                    attachment: i
                },
                dataType: "json"
            }).always(function(t) {
                if (!0 === t.success) try {
                    if (!t.focusPoint.hasOwnProperty("x") || !t.focusPoint.hasOwnProperty("y")) throw "Wrong object properties";
                    e.set("_focusPoint", t.focusPoint);
                } catch (t) {
                    console.log(t);
                }
            });
        }
    });
}(jQuery, window), function(t, e) {
    IFA.Models.FocusInterface = Backbone.Model.extend({
        _width: 0,
        _height: 0,
        _radius: 0,
        _offset: {
            x: 0,
            y: 0
        },
        _position: {
            x: 0,
            y: 0
        },
        _clickPosition: {
            x: 0,
            y: 0
        },
        _state: {
            init: !1,
            move: !1,
            active: !1,
            hover: !1
        },
        initialize: function() {
            console.log("initialize focuspoint");
        }
    });
}(jQuery, window), function(t, e) {
    "use strict";
    IFA.Views.Attachment = Backbone.View.extend({
        events: {
            resize: "updateDimensions"
        },
        initialize: function() {
            console.log("init view attachment");
            var i = this;
            t(e).on("resize", function() {
                i.updateDimensions();
            }), this.model.on("change:_focusPoint", this.updateDimensions, this);
        },
        updateDimensions: function() {
            console.log("attachment view: update dimensions");
            var t = this.model.$img;
            this.model._width = t.width(), this.model._height = t.height(), this.model._offset.x = t.offset().left, 
            this.model._offset.y = t.offset().top;
        },
        render: function() {
            return console.log("attachment view: render"), this;
        },
        remove: function() {
            t(e).off("resize", this.updateDimensions), Backbone.View.prototype.remove.apply(this, arguments);
        }
    });
}(jQuery, window), function(t, e) {
    "use strict";
    IFA.Views.FocusInterface = Backbone.View.extend({
        cssClass: {
            _imageFocus: "image-focus",
            imageFocus: {
                _wrapper: "image-focus__wrapper",
                _img: "image-focus__img",
                _point: "image-focus__point",
                _clickarea: "image-focus__clickarea",
                _button: "image-focus__button"
            }
        },
        template: !1,
        $img: !1,
        imgHtml: !1,
        $imageFocus: !1,
        $container: !1,
        $clickarea: !1,
        initialize: function(i, o) {
            console.log("focusinterface view: initialize");
            var s = this;
            this.attachment = i.attachment, this.template = wp.template("IFA-focus-point"), 
            this.$img = o.$img, this.$img.addClass(this.cssClass.imageFocus._img), this.imgHtml = this.$img.get(0).outerHTML, 
            this.$img.wrap('<div class="IFA-container"></div>'), this.$container = this.$el.find(".IFA-container"), 
            this.$imageFocus = this.$el.find("." + this.cssClass._imageFocus), this.$clickarea = this.$el.find("." + this.cssClass.imageFocus._clickarea), 
            this.render(), this.model.on("change", this.render, this), this.attachment.on("change", this.render, this), 
            this.$clickarea.on("mousedown", function(t) {
                console.log("click area mousedown"), 1 === t.which && s.startMove(t, !0).move(t);
            }), this.$el.on("mousedown", function(t) {
                console.log("interface mousedown"), 1 === t.which && s.startMove(t);
            }).on("mouseenter", function() {
                s.model._state.hover = !1, s.$imageFocus.toggleClass("is-hover", !1);
            }).on("mouseleave", function() {
                s.model._state.hover = !1, s.$imageFocus.toggleClass("is-hover", !1);
            }), t(e).on("mouseup", function(t) {
                1 === t.which && (s.model._state.move = !1, s.model._state.active = !1, s.$imageFocus.removeClass("is-active"));
            }).on("mousemove", function(t) {
                s.move(t);
            }).on("resize", function() {
                s.updateDimensionData().updateStyle();
            });
        },
        events: {},
        render: function() {
            console.log("focusinterface view: render"), this.$container.html(this.template({
                imageObject: this.imgHtml,
                left: this.attachment._focusPoint.x,
                top: this.attachment._focusPoint.y,
                state: "is-initialized"
            }));
        },
        startMove: function(t, e) {
            return this.updateDimensionData().updateClickPosition(t, e), this.model._state.move = !0, 
            this.model._state.active = !0, this;
        },
        move: function(t) {
            if (!1 === this.model._state.move) return !1;
            var e = {
                x: t.pageX,
                y: t.pageY
            }, i = {}, o = this.attachment._offset, s = this.model._clickPosition;
            i.x = e.x - o.x - s.x, i.y = e.y - o.y - s.y, i.x = this.helper.calc.maxRange(i.x, 0, this.attachment._width), 
            i.y = this.helper.calc.maxRange(i.y, 0, this.attachment._height);
            var n = {};
            return n.x = i.x / this.attachment._width * 100, n.y = i.y / this.attachment._height * 100, 
            this.attachment.set("_focusPoint", n), this.model.set("_position", i), this.updateStyle(), 
            this;
        },
        updateStyle: function() {
            return this.updateStylePosition(), this.updateStyleBackground(), this;
        },
        updateStylePosition: function() {
            return console.log("updateStylePosition"), this.$el.css({
                left: this.attachment._focusPoint.x + "%",
                top: this.attachment._focusPoint.y + "%"
            }), this;
        },
        updateStyleBackground: function() {
            console.log("updateStyleBackground");
            var t = 0 - (this.model._position.x - this.model._radius), e = 0 - (this.model._position.y - this.model._radius);
            return this.$el.css({
                backgroundImage: 'url("' + this.attachment.$el.attr("src") + '")',
                backgroundSize: this.attachment._width + "px " + this.attachment._height + "px ",
                backgroundPosition: t + "px " + e + "px "
            }), this;
        },
        updateClickPosition: function(t, e) {
            var i = {
                x: 0,
                y: 0
            };
            if (!0 !== e) {
                var o = {
                    x: t.pageX,
                    y: t.pageY
                }, s = this.model._offset;
                (i = {}).x = o.x - s.x, i.y = o.y - s.y;
            }
            return this.model._clickPosition = i, this;
        },
        updateDimensionData: function() {
            this.model._width = this.$el.width(), this.model._height = this.$el.height();
            var t = this.model._width / 2;
            this.model._radius = t;
            var e = this.$el.offset();
            return this.model._offset = {
                x: e.left + t,
                y: e.top + t
            }, this.model._position = {
                x: this.attachment._focusPoint.x / 100 * this.attachment._width,
                y: this.attachment._focusPoint.y / 100 * this.attachment._height
            }, this;
        },
        helper: {
            calc: {
                maxRange: function(t, e, i) {
                    var o = t;
                    return t < e ? o = e : t > i && (o = i), o;
                }
            }
        }
    });
}(jQuery, window);
//# sourceMappingURL=focuspoint.min.js.map